//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/ACSSandbox/Client/Unity Assets/ClientInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace ACSSandbox.Client
{
    public partial class @ClientInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ClientInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""ClientInputActions"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""9e43b38d-5cd9-4265-b995-c0f81aaf0eb5"",
            ""actions"": [
                {
                    ""name"": ""Tab Navigation"",
                    ""type"": ""Button"",
                    ""id"": ""b822352c-a4ee-4c7e-9b69-7e9dc17d0cd8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3fda4018-9f63-46f9-b277-9b4cfdd6e72d"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tab Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            m_UI_TabNavigation = m_UI.FindAction("Tab Navigation", throwIfNotFound: true);
        }

        ~@ClientInputActions()
        {
            UnityEngine.Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, ClientInputActions.UI.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // UI
        private readonly InputActionMap m_UI;
        private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
        private readonly InputAction m_UI_TabNavigation;
        public struct UIActions
        {
            private @ClientInputActions m_Wrapper;
            public UIActions(@ClientInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @TabNavigation => m_Wrapper.m_UI_TabNavigation;
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void AddCallbacks(IUIActions instance)
            {
                if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
                @TabNavigation.started += instance.OnTabNavigation;
                @TabNavigation.performed += instance.OnTabNavigation;
                @TabNavigation.canceled += instance.OnTabNavigation;
            }

            private void UnregisterCallbacks(IUIActions instance)
            {
                @TabNavigation.started -= instance.OnTabNavigation;
                @TabNavigation.performed -= instance.OnTabNavigation;
                @TabNavigation.canceled -= instance.OnTabNavigation;
            }

            public void RemoveCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUIActions instance)
            {
                foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UIActions @UI => new UIActions(this);
        public interface IUIActions
        {
            void OnTabNavigation(InputAction.CallbackContext context);
        }
    }
}
